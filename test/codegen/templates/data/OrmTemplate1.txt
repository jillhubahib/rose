import * as rose from 'rose';

const FooTableAllColumns = {
	id: QFooTable.id,
};
const FooTableDefaultQueries = {
	getOne: (function getOne() {
		interface Params {
			id: number;
		}

		const P = new rose.ParamsWrapper<Params>();
		return rose.select<FooTableAllColumns, Params>(FooTableAllColumns).where(QFooTable.id.eq(P.get((p) => p.id))).prepare();
	})(),
	insertOne: function updateOne(row: FooTableInsertRow) {
		return rose.insertFromObject<TFooTable, FooTableInsertRow, {}>(QFooTable, row).prepare();
	},
	updateOne: function updateOne(updates: rose.PartialTableColumns<TFooTable>) {
		interface Params {
			id: number;
		}

		const P = new rose.ParamsWrapper<Params>();
		return rose.updateFromObject<TFooTable, Params>(QFooTable, updates).where(QFooTable.id.eq(P.get((p) => p.id))).prepare();
	},
	deleteOne: (function deleteOne() {
		interface Params {
			id: number;
		}

		const P = new rose.ParamsWrapper<Params>();
		return rose.deleteFrom<Params>(QFooTable).where(QFooTable.id.eq(P.get((p) => p.id))).prepare();
	})(),
};
