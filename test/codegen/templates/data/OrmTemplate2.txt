import * as rose from 'rose';

export const FooTableAllColumns = {
	name: QFooTable.name,
	createdAt: QFooTable.createdAt,
};
export const FooTableDefaultQueries = {
	getOne: (function getOne() {
		interface Params {
			name: string;
			createdAt: Date;
		}

		const P = rose.params<Params>();
		return rose.select<typeof FooTableAllColumns, Params>(FooTableAllColumns).where(rose.and(QFooTable.name.eq(P.name), QFooTable.createdAt.eq(P.createdAt))).prepare();
	})(),
	insertOne: function updateOne(row: FooTableInsertRow) {
		return rose.insertFromObject<TFooTable, FooTableInsertRow, {}>(QFooTable, row).prepare();
	},
	updateOne: function updateOne(updates: rose.PartialTableColumns<TFooTable>) {
		interface Params {
			name: string;
			createdAt: Date;
		}

		const P = rose.params<Params>();
		return rose.updateFromObject<TFooTable, Params>(QFooTable, updates).where(rose.and(QFooTable.name.eq(P.name), QFooTable.createdAt.eq(P.createdAt))).prepare();
	},
	deleteOne: (function deleteOne() {
		interface Params {
			name: string;
			createdAt: Date;
		}

		const P = rose.params<Params>();
		return rose.deleteFrom<Params>(QFooTable).where(rose.and(QFooTable.name.eq(P.name), QFooTable.createdAt.eq(P.createdAt))).prepare();
	})(),
};
